
const producer = require('./produce')
const consumer = require('./consume')
const fs = require("fs");



function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}


const handleWorkflowAssignment = function (workflowMessage) {
    const workflowAssignment = JSON.parse(workflowMessage.value.toString())
    const workflowType = workflowAssignment["workflow-type"]
    console.log(`Received Workflow Instruction of type ${workflowType} generated at ${workflowAssignment["create-time"]}`)
    if ("bill-generation" == workflowType) {
        console.log(`Generate bill for customer ${workflowAssignment.payload.customerIdentifier}`)
        generateCustomerBill(workflowAssignment.payload.customerIdentifier, workflowAssignment["workflow-id"])
    }
    else {
        // ignore this workflow instruction because this microservice cannot/does not have to handle it 
        console.log(`Ignore workflow instruction of type ${workflowType}; the Billing Engine microservice does not handle this type of workflow `)
    }
}

const handleAnswer = function (answerMessage) {
    const answerMsg = JSON.parse(answerMessage.value.toString())
    // answer.qaIdentifier should correspond to an entry in billGenerationJobs in order for this answer to be processable
    if (billGenerationJobs[answerMsg.qaIdentifier]) {
        console.log("Received answer to our question ")
        billGenerationJobs[answerMsg.qaIdentifier].customer = answerMsg.answer
        generateCustomerBill(null, answerMsg.qaIdentifier)
    }
    else {
        console.log("Received an answer to a question we did not ask or already had an answer to")
    }

}


consumer.setMessageHandler("workflow-queue", handleWorkflowAssignment)
consumer.setMessageHandler("answers-topic", handleAnswer)

consumer.initializeConsumer()

const billGenerationJobs = {} // key-value map with workflow identifier as key and a bill generation job object as value

const generateCustomerBill = function (customerIdentifier, workflowIdentifier) {

    if (billGenerationJobs[workflowIdentifier]) { //job was already started, let's see if we can finish it now
        console.log(`Finish bill generation with full details on customer ${JSON.stringify(billGenerationJobs[workflowIdentifier].customer)}`)
        completeBill(workflowIdentifier)
    }
    else { // start a new job and collect Customer Details (ask around)
        console.log(`New job: Generate Customer Bill - assignment ${workflowIdentifier}`)
        billGenerationJobs[workflowIdentifier] = { "customerIdentifier": customerIdentifier }
        // now ask question about customer
        const question = {
            "questionCategory": "customer"
            , "qaIdentifier": workflowIdentifier
            , "payload":
                { "customerIdentifier": customerIdentifier }
        }
        producer.produceMessage(JSON.stringify(question))
    }
}

const completeBill = function (workflowIdentifier) {
    const customer = billGenerationJobs[workflowIdentifier].customer

    const data = 
`Bill for ${customer.firstName} ${customer.lastName}
=============================================================================
    City: ${customer.city}
    Connection Identifier: ${customer.connectionId}

    Total Amount:  199 euro



    (generated by Billing Engine in Workflow ${workflowIdentifier} at ${new Date().toUTCString()})
    `;
    const fileName = `customer-bill-${customer.customerId}.txt`
    fs.writeFile(fileName, data, (err) => {
      if (err) console.log(err);
      console.log(`Successfully Written to File ${fileName}.`);
    }); 
}